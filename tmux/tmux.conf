set-option -ga terminal-overrides ",xterm-256color:Tc"
set -g default-terminal "screen-256color"
set -g extended-keys on

set-option -g status-style bg=default,fg=white
set-option -g window-style bg=default
set-option -g window-active-style bg=default

set-option -g status-left "[#S]: "
set-option -g status-left-style bg=#000000,fg=grey,bold
set-option -g status-left-length 50
set-option -g status-right ""

set-option -g window-status-format "[#I] #W #{?window_zoomed_flag,#[fg=black]#[bg=lightgreen][Z],}#{?pane_synchronized,#[fg=black]#[bg=red][S],}#{?pane_in_mode,#[fg=black]#[bg=yellow][C],}"
set-option -g window-status-style bg=black,fg=grey

set-option -g window-status-current-format "[#I] #W #{?window_zoomed_flag,#[fg=black]#[bg=lightgreen][Z],}#{?pane_synchronized,#[fg=black]#[bg=red][S],}#{?pane_in_mode,#[fg=black]#[bg=yellow][C],}"
set-option -g window-status-current-style bg=green,fg=black,bold

set-option -g base-index 1
set-option -g pane-base-index 1
set-option -g detach-on-destroy off
set-option -g history-limit 100000
set-option -g renumber-windows on

unbind -a
set -g prefix C-b
bind-key C-b send-prefix

# Edit tmux buffer in nvim
bind -n M-v run-shell ' \
  tmp=$(mktemp); \
  tmux capture-pane -J -S -; \
  tmux save-buffer "$tmp"; \
  tmux display-popup -w 100% -h 100% -S fg=yellow,bg=black -E " \
     nvim -c \"set ft=conf\" \
         -c \"lua vim.cmd([[normal Go]]) vim.fn.search([[\\\\S]], \\\"b\\\") vim.cmd([[normal jdG]])\" \
         \"$tmp\"; \
    rm \"$tmp\" \
  "'

bind-key ? list-keys
bind-key d detach-client
bind-key : command-prompt
bind-key q display-panes

bind-key z resize-pane -Z
# bind-key s choose-tree -s

# Session switcher with fzf popup
bind-key s display-popup -E " \
  original_session=\$(tmux display-message -p '#S'); \
  selected=\$( \
    (tmux list-sessions | grep \"^\$original_session:\"; \
     tmux list-sessions | grep -v \"^\$original_session:\") \
    | fzf \
      --bind='ctrl-x:execute(echo {} | cut -d: -f1 | xargs tmux kill-session -t)+reload(tmux list-sessions)' \
      --bind='focus:execute-silent(tmux switch-client -t {1})' \
      --delimiter=':' \
    | cut -d: -f1 \
  ); \
  tmux switch-client -t \"\$original_session\"; \
  if [ -n \"\$selected\" ]; then \
    tmux switch-client -t \"\$selected\"; \
  fi"

# Create/Switch sessions for Zoxide directories
bind-key p display-popup -E ' \
  dir=$(zoxide query -l | fzf --bind="ctrl-x:execute(echo {} | xargs zoxide remove)+reload(zoxide query -l)"); \
  [ -z "$dir" ] && exit; \
  base=${dir##*/}; \
  base=${base//./\_}; \
  existing=$(tmux list-sessions -F "#{session_name}:#{session_path}" 2>/dev/null | grep ":${dir}$" | cut -d: -f1 | head -1); \
  if [ -n "$existing" ]; then \
    tmux switch-client -t "$existing"; \
  else \
    name=$base; \
    i=1; \
    while tmux has-session -t "$name" 2>/dev/null; do \
      name="${base}@$((i++))"; \
    done; \
    tmux new-session -d -s "$name" -c "$dir" && tmux switch-client -t "$name"; \
  fi'

bind-key -T root C-y if -F '#{==:#{pane_mode},tree-mode}' 'send-keys Enter' 'send-keys C-y'

bind-key c new-window

# Alt + L switches to the last session
bind-key l switch-client -l

bind-key \{ swap-pane -U
bind-key \} swap-pane -D

bind-key < command-prompt "rename-session '%%'"
bind-key , command-prompt "rename-window '%%'"
bind-key r source-file $XDG_CONFIG_HOME/tmux/tmux.conf; display "Refreshed!"

# https://unix.stackexchange.com/a/25638
# Prevent vim escape key delay
set -g escape-time 0

bind-key b copy-mode
bind-key v paste-buffer

bind-key x kill-pane
bind-key O kill-pane -a
bind-key w kill-window
bind-key W kill-session

setw -g mode-keys vi
setw -g mouse on

bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X begin-selection \; send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
bind-key -T copy-mode-vi Escape send-keys -X cancel

bind-key -n M-\{ switch-client -p
bind-key -n M-\} switch-client -n

bind-key -n M-, select-window -p
bind-key -n M-. select-window -n

bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4

bind-key 1 select-pane -t 1
bind-key 2 select-pane -t 2
bind-key 3 select-pane -t 3
bind-key 4 select-pane -t 4
bind-key 5 select-pane -t 5
bind-key 6 select-pane -t 6

bind-key -n M-< swap-window -t -1\; select-window -t -1
bind-key -n M-> swap-window -t +1\; select-window -t +1

# Bind 'Prefix + e' to split window vertically
bind-key e split-window -h -c "#{?pane_path,#{s@^file.//@@:pane_path},#{pane_current_path}}"
# Bind 'Prefix + o' to split window horizontally
bind-key o split-window -v -c "#{?pane_path,#{s@^file.//@@:pane_path},#{pane_current_path}}"
# Bind 'Prefix + n' open a small horizontal split
bind-key n split-window -v -l 4 -c "#{?pane_path,#{s@^file.//@@:pane_path},#{pane_current_path}}"

# Bind 'Ctrl + Alt + <h/j/k/l>' to resize panes (Prioritizing tmux panes)
bind-key -n C-M-h resize-pane -L 4
bind-key -n C-M-j resize-pane -D 4
bind-key -n C-M-k resize-pane -U 4
bind-key -n C-M-l resize-pane -R 4

# Bind 'Ctrl + <h/j/k/l>' to move between panes (Prioritizing Neovim panes)
# See: https://github.com/christoomey/vim-tmux-navigator
vim_pattern='(\S+/)?g?\.?(view|l?n?vim?x?|fzf)(diff)?(-wrapped)?'
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +${vim_pattern}$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

# OpenCode window management - Press 'Alt + o' to create/switch to opencode window
bind-key -n M-o run-shell ' \
  if tmux select-window -t "opencode" 2>/dev/null; then \
    opencode_running=$(tmux capture-pane -p | grep -c "opencode"); \
    if [ "$opencode_running" -eq 0 ]; then \
      tmux send-keys "opencode" Enter; \
    fi; \
  else \
    tmux new-window -n "opencode" -c "#{pane_current_path}" \; \
    send-keys "opencode" Enter; \
  fi'

# Toggle pane sync and change border color based on status
bind-key S run-shell ' \
  if [ "$(tmux show -w synchronize-panes)" = "synchronize-panes on" ]; then \
    tmux setw synchronize-panes off; \
    tmux set -g pane-border-style fg=default; \
    tmux set -g pane-active-border-style fg=green; \
  else \
    panes=$(tmux display -p "#{window_panes}"); \
    zoomed=$(tmux display -p "#{window_zoomed_flag}"); \
    copy=$(tmux display -p "#{pane_in_mode}"); \
    if [ "$panes" -gt 1 ] && [ "$zoomed" = "0" ] && [ "$copy" = "0" ]; then \
      tmux setw synchronize-panes on; \
      tmux set -g pane-border-style fg=red; \
      tmux set -g pane-active-border-style fg=red; \
    fi; \
  fi'

# Press 'Prefix + ctrl-s' to save the current tmux environment
# Press 'Prefix + ctrl-r' to restore the saved tmux environment
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-capture-pane-contents 'on'

run-shell '$XDG_CONFIG_HOME/tmux/plugins/tmux-resurrect/resurrect.tmux'

